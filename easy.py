import streamlit as st
import pandas as pd
from collections import Counter

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∂–∞–ª–æ–± –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
CATEGORIES = {
    "–†–∞–∑–º–µ—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç": [
         "–Ω–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É", "–Ω–µ –ø–æ–¥–æ—à–ª–∞", "–º–∞–ª–∞", "–º–∞–ª–µ–Ω—å–∫–∞—è", "–∑–∞–∑–æ—Ä—ã", "–∫–æ—Ä–æ—Ç–∫–æ–π",
        "–Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã–≤–∞–µ—Ç", "–Ω–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω", "–ø—Ä–æ—Ä–µ–∑–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç", "–Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∫—Ä–∞—è",
        "–º–µ–Ω—å—à–µ –ø–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏",  "–∫—Ä–∏–≤–æ–π –≤—ã—Ä–µ–∑", "–Ω–µ —Å–æ–≤–ø–∞–ª —Å –∫–∞–º–µ—Ä–æ–π", "–Ω–µ–ø–æ–¥–æ—à–ª–∏", "–±–æ–ª—å—à–∏–µ",
        "–≤—ã—Ä–µ–∑ –ø–æ–¥ –∫–∞–º–µ—Ä—É", "—Ä–∞–∑–º–µ—Ä"
    ],
    "–ö–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞": [ "—Ç–æ–Ω–∫–∞—è", "–∫–∞—á–µ—Å—Ç–≤–æ", "—É–∂–∞—Å–Ω–æ–µ", "—Ä—è–±–∏—Ç", "—Ä–∞–∑–º—ã—Ç–æ", "—Ç–æ–Ω–µ–Ω—å–∫–∞—è", "–ø—É–∑—ã—Ä—å",
        "–æ—Ç–∫–ª–µ–∏–≤–∞–µ—Ç—Å—è", "–ø–æ –∫—Ä–∞—è–º", "–±–æ–ª—è—Ç –≥–ª–∞–∑–∞", "–Ω–µ –ø—Ä–∏–∫–ª–µ–∏–≤–∞–µ—Ç—Å—è", "–∫–æ–ª–µ—Ç—Å—è",
        "–≤–∏–¥–Ω–æ –ø–ª–æ—Ö–æ", "–≤ –º–∞—Å–ª–µ", "—Ç–æ—á–∫–∏", "—à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω–∞—è", "—Ü–∞—Ä–∞–ø–∞–µ—Ç—Å—è", "–Ω–µ —Ä–æ–≤–Ω–∞—è",
        "—É–≥–ª—ã –æ—Ç–∫–ª–µ–∏–ª–∏—Å—å", "–æ—Å—Ç–∞—é—Ç—Å—è –ø–æ–ª–æ—Å—ã", "–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é", "–∫—Ä–∞—è –Ω–µ –ø—Ä–∏–∫–ª–µ–∏–≤–∞—é—Ç—Å—è",
        "–∑–∞–¥–∏—Ä–∞–µ—Ç—Å—è", "–æ—Ç—Ö–æ–¥–∏—Ç"
    ],
    "–ë—Ä–∞–∫": ["–º—É—Å–æ—Ä", "–≥—Ä—è–∑–Ω–∞—è", "—Ü–∞—Ä–∞–ø–∏–Ω–∞", "–≥—Ä—è–∑–Ω–æ–µ", "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ", "–¥–µ—Ñ–µ–∫—Ç", "—Å–ª–æ–º–∞–Ω–æ",
        "–±—Ä–∞–∫", "—Ç—Ä–µ—Å–Ω—É–ª–æ", "—Ç—Ä–µ—Å–Ω—É–ª–∞", "–ø–æ–º—è—Ç–∞—è —É–ø–∞–∫–æ–≤–∫–∞", "—Å—Ç–µ–∫–ª–æ —Ç—Ä–µ—Å–Ω—É–ª–æ", "–ø–æ—Ä–≤–∞–ª—Å—è"
    ],
    "–û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏": ["–≤–º–µ—Å—Ç–æ", "–Ω–µ —Ç–æ", "–æ—à–∏–±–∫–∞", "–ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏", "–Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª", "–≥–∏–¥—Ä–æ–≥–µ–ª–µ–≤–∞—è",
        "–Ω–µ –ø–æ–ª–∏—É—Ä–µ—Ç–∞–Ω–æ–≤–∞—è", "–ø—Ä–∏—à–ª–æ –Ω–µ —Ç–æ", "–≤—ã—Ä–µ–∑ –Ω–µ —Ç–∞–∫–æ–π", "–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç",
        "–∞–Ω–¥—Ä–æ–∏–¥ –≤–º–µ—Å—Ç–æ –∞–π—Ñ–æ–Ω", "–¥—Ä—É–≥–æ–π —Ü–≤–µ—Ç", "–ø—Ä–∏—Å–ª–∞–ª–∏ –≥–ª—è–Ω–µ—Ü", "–ø—Ä–∏—Å–ª–∞–ª–∏ –æ–¥–Ω—É",
        "–∑–∞–∫–∞–∑–∞–ª –¥–≤–µ", "–ø—Ä–∏—à–ª–æ –Ω–∞ –∞–Ω–¥—Ä–æ–∏–¥", "–ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Ç—É", "–æ–¥–Ω–∞ –ø–ª—ë–Ω–∫–∞", "–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç"
    ],
    "–í–∏–∑—É–∞–ª—å–Ω–æ–µ –∏—Å–∫–∞–∂–µ–Ω–∏–µ": ["–∏—Å–∫–∞–∂–∞–µ—Ç", "–±–ª–µ–∫–ª–æ", "—Ä–∞–∑–º—ã—Ç–æ", "–≤—Å—ë –º—É—Ç–Ω–æ", "–∏—Å–∫–∞–∂–µ–Ω–∏–µ"],
    "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã": ["–æ—Ç–ø–µ—á–∞—Ç–æ–∫", "–ø–∞–ª–µ—Ü –Ω–µ –≤–∏–¥–∏—Ç", "–ø–∞–ª–µ—Ü –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç", "–Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç",
        "–Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø–µ—á–∞—Ç–æ–∫", "face id", "touch id", "–±—É–∫–≤—ã –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç",
        "—ç–∫—Ä–∞–Ω –Ω–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π", "–ø–∞—Ä–æ–ª—å –Ω–µ –≤–≤–æ–¥–∏—Ç—Å—è", "—è—Ä–∫–æ—Å—Ç—å", "–∑–∞—Ç–µ–Ω—è–µ—Ç"],
    "–ó–∞–ø–∞—Ö": ["–≤–æ–Ω—è–µ—Ç", "–≤–æ–Ω—è–ª–∞", "–ø–∞—Ö–Ω–µ—Ç", "–∑–∞–ø–∞—Ö", "–Ω–µ–ø—Ä–∏—è—Ç–Ω—ã–π –∑–∞–ø–∞—Ö", "–≤–æ–Ω—å"],
    "–î–æ—Å—Ç–∞–≤–∫–∞": ["–º—è—Ç–∞—è", "–∫–æ—Ä–æ–±–∫–∞"],
    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è": ["–Ω–µ –ø–æ–Ω—è—Ç–Ω–∞—è", "—Å–ª–æ–∂–Ω–æ"],
    # –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏
}

# –§—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏

def classify_review(text):
    text = text.lower()
    matched = []
    for cat, keywords in CATEGORIES.items():
        if any(word in text for word in keywords):
            matched.append(cat)
    return matched if matched else ["–î—Ä—É–≥–æ–µ"]

# –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É—á—ë—Ç–æ–º "–î—Ä—É–≥–æ–µ"

def get_main_category(categories_list):
    counts = Counter(categories_list)
    common = counts.most_common()
    if common and common[0][0] == "–î—Ä—É–≥–æ–µ" and len(common) > 1:
        return f"–î—Ä—É–≥–æ–µ, {common[1][0]}"
    return common[0][0] if common else "–î—Ä—É–≥–æ–µ"

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä—ã", layout="wide")
st.title("üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä—ã")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏ (Excel)", type=["xlsx"])
if uploaded_file is not None:
    df = pd.read_excel(uploaded_file, sheet_name="–æ—Ç–∑—ã–≤—ã")
    df = df[["–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥", "–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞", "–î–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞", "–ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏"]]
    df.columns = ["model", "stars", "text", "pros_text", "cons_text"]
    df["stars"] = pd.to_numeric(df["stars"], errors='coerce')
    df["full_text"] = df[["text", "pros_text", "cons_text"]].fillna("").agg(" ".join, axis=1)
    df = df[df["full_text"].str.strip() != ""]

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤
    df_neg = df[df["stars"] <= 4]

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    df_neg["categories"] = df_neg["full_text"].apply(classify_review)
    all_data = df_neg.explode("categories")

    # –¢–æ–ø-20 –º–æ–¥–µ–ª–µ–π –ø–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º –æ—Ç–∑—ã–≤–∞–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    st.subheader("üí• –¢–æ–ø-20 –º–æ–¥–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤")
    bad_counts = df_neg["model"].value_counts()
    total_counts = df["model"].value_counts()
    summary_df = pd.DataFrame({
        "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö": bad_counts,
        "–í—Å–µ–≥–æ": total_counts
    }).fillna(0).astype(int)
    summary_df["% –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö"] = (summary_df["–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö"] / summary_df["–í—Å–µ–≥–æ"] * 100).round(1)
    main_cat = all_data.groupby("model")["categories"].apply(get_main_category)
    summary_df["–û—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"] = main_cat
    top_summary = summary_df.sort_values("–ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö", ascending=False).head(20)
    st.dataframe(top_summary)

    # –û–±—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∂–∞–ª–æ–±
    st.subheader("üìä –ù–∞ —á—Ç–æ –∂–∞–ª—É—é—Ç—Å—è –∫–ª–∏–µ–Ω—Ç—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ")
    overall_counts = all_data["categories"].value_counts().reset_index()
    overall_counts.columns = ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
    st.dataframe(overall_counts)

    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    for _, row in overall_counts.iterrows():
        cat = row["–ö–∞—Ç–µ–≥–æ—Ä–∏—è"]
        cnt = row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
        with st.expander(f"{cat} ‚Äî {cnt} –æ—Ç–∑—ã–≤–æ–≤"):
            sub = all_data[all_data["categories"] == cat]
            st.download_button(
                label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                data=sub[["model", "stars", "full_text"]].to_csv(index=False),
                file_name=f"{cat}_–≤—Å–µ_–æ—Ç–∑—ã–≤—ã.csv",
                mime="text/csv"
            )
            model_counts = sub["model"].value_counts().reset_index()
            model_counts.columns = ["–ú–æ–¥–µ–ª—å", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤"]
            st.dataframe(model_counts)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏—é "–í—Å–µ –º–æ–¥–µ–ª–∏" –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            models = model_counts["–ú–æ–¥–µ–ª—å"].tolist()
            options = ["–í—Å–µ –º–æ–¥–µ–ª–∏"] + models
            selected_model = st.selectbox(
                f"–û—Ç–∑—ã–≤—ã –ø–æ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ–±–ª–µ–º–æ–π ¬´{cat}¬ª",
                options,
                index=0,
                key=f"sel_{cat}"
            )

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞
            if selected_model == "–í—Å–µ –º–æ–¥–µ–ª–∏":
                model_reviews = sub
            else:
                model_reviews = sub[sub["model"] == selected_model]

            for _, r in model_reviews.iterrows():
                st.markdown(f"**‚≠ê {int(r['stars'])}** ‚Äî {r['full_text'].strip()}")
                st.markdown("---")
